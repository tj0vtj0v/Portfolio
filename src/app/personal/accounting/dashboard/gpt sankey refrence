private build_sankey_chart(): void {
    // Generate the transaction data for Sankey (date, source, target, amount)
    const transactionData = this.getTransactionData(); // Replace with your logic for getting transactions

    // Process the transaction data
    const refinedTransactions = transactionData.map(transaction => {
        return {
            source: transaction.source.name,
            target: transaction.target.name,
            value: transaction.amount,
        };
    });

    // Define the Sankey chart options
    this.sankey_chart = {
        title: {
            text: 'Transaction Flows Between Accounts',
            left: 'center',
        },
        tooltip: {
            trigger: 'item',
            formatter: (params: any) => {
                return `${params.data.source} → ${params.data.target}: ${parseFloat(params.data.value).toFixed(2)}€`;
            },
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            selectedMode: 'multiple',
        },
        series: [
            {
                type: 'sankey',
                data: this.getNodesFromTransactions(refinedTransactions), // Function to extract unique nodes
                links: refinedTransactions,
                label: {
                    show: true,
                    position: 'inside',
                    formatter: '{b}',
                },
                emphasis: {
                    focus: 'adjacency',
                },
            },
        ],
    };
}

// Function to extract unique nodes from transaction data
private getNodesFromTransactions(transactions: { source: string, target: string, value: number }[]): any[] {
    const nodesSet = new Set<string>();

    // Add unique source and target nodes
    transactions.forEach(tx => {
        nodesSet.add(tx.source);
        nodesSet.add(tx.target);
    });

    // Create nodes array from the unique nodes
    return Array.from(nodesSet).map(name => ({
        name,
        itemStyle: {
            color: this.getColorForNode(name), // Function to assign a color to each node
        },
    }));
}

// Function to assign colors to nodes (you can customize it further)
private getColorForNode(nodeName: string): string {
    const colors = {
        'Spargeld': '#5AA454',
        'TradeRepublic': '#C7B42C',
        'Spassgeld': '#AAAAAA',
        'Hauptkonto': '#FF5733',
        'Abschreibung': '#33FF57',
    };
    return colors[nodeName] || '#000000'; // Default to black if no color found
}
